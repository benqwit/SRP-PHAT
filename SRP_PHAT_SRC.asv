function [sursa_gasita]=SRP_PHAT_SRC(mics, fs, s, n, lsb, usb)
       

 
        % %% -corelatia intre fiecare microfon - 
    
        [nr_mic,b]=size(mics);

        corelatie=zeros( (nr_mic*(nr_mic-1)/2), length(s)+length(s)-1);
        idx=1;
        for(i=1:nr_mic-1)
            for(j=i+1:nr_mic)
                %realizare corelatia intre mic i si j
                [c cor cor2]=gccphat(s(:,i),s(:,j));
                corelatie(idx, :)=abs(cor);
                idx=idx+1;
            end
        end

%% generare p_cte

p_cte=lsb + (usb - lsb).*rand(3,n);
%%

%%
%calculare distanta p-ct microfon
distante=zeros((nr_mic*(nr_mic-1)/2), n);

idx=1;
for(i=1:nr_mic)
    microfon=mics(i, :)';
    microfon_rep=repmat(microfon, 1, length(p_cte));
    distante(idx, :)=sqrt( (p_cte(1, :)-microfon_rep(1,:)).^2  +(p_cte(2, :)-microfon_rep(2,:)).^2 + (p_cte(3, :)-microfon_rep(3,:)).^2 );
    idx=idx+1;
    
end

% 
%% determinare diferente de distante
idx=1;
difDistanta=zeros((nr_mic*(nr_mic-1)/2), n);

for(i=1:nr_mic-1)
    for(j=i+1:nr_mic)
        %realizare diferenta de distanta
        difDistanta(idx, :)=distante(i,:)-distante(j,:);
        idx=idx+1;
    end
end
% 

difEsantion=difDistanta*fs/343;

difEsantionIdx=fix(difEsantion)+length(s);



[maxim indexMaxim]=max(corelatie');

indexMaxim=indexMaxim';
[nr1, nr2]=size(difEsantionIdx);
indexMaxim2=repmat(indexMaxim, 1,nr2 );

% corelatieSum=sum(corelatie);
% sumaCorelatie=zeros(1,length(difEsantionIdx));

%% extragere p-ct
c=indexMaxim2-difEsantionIdx;
% cc=c-length(s)
cc=abs(c);
ccc=sum(cc);
[minim, index]=min(ccc); %valoarea minima corespunde sursei
sursa_gasita=p_cte(:,index);




    toc
end
